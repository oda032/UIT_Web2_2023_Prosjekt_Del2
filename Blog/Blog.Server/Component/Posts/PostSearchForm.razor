@using Blog.Common.Model.ViewModel

<MudText Typo="Typo.h5" Align="Align.Start" Style="@($"color:{Colors.Cyan.Darken4};font-size:1.5rem;text-transform: uppercase;")">search in the posts</MudText>
<EditForm Model="@Model" OnValidSubmit=ResetSearch>
    <DataAnnotationsValidator />
    <div>
        <div class="form-group">
            <label for="selectField">Select:</label>
            <InputSelect id="selectField" @bind-Value="@Model.Option" class="form-control">
                <option value="" disabled selected>Choose your option</option>
                <option value="option1">Search by username</option>
                <option value="option2">Search by tags</option>
            </InputSelect>
        </div>
        
        <div class="form-group">
            <label for="searchField">Search:</label>
            <InputText id="searchField" @bind-Value="@Model.Search" class="form-control" @oninput="HandleInputAndSearch" />
        </div>

        <div class="pt-2" align="right">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Default">reset data</MudButton>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<PostSearchModel> OnSearch { get; set; }

    [Parameter]
    public EventCallback<PostSearchModel> onValidSearch { get; set; }

    public PostSearchModel Model { get; set; } = new();

    private async Task HandleInputAndSearch(ChangeEventArgs e)
    {
        Model.Search = e.Value?.ToString();
        await Search();
    }

    private async Task Search()
    {
        await OnSearch.InvokeAsync(Model);
    }

    private async Task ResetSearch()
    {
        Model = new PostSearchModel();
        await onValidSearch.InvokeAsync();
    }
}
